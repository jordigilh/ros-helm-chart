apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ros-ocp.fullname" . }}-rosocp-api
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
    app.kubernetes.io/name: rosocp-api
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ros-ocp.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
      app.kubernetes.io/name: rosocp-api
  template:
    metadata:
      labels:
        {{- include "ros-ocp.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
        app.kubernetes.io/name: rosocp-api
    spec:
      serviceAccountName: {{ include "ros-ocp.serviceAccountName" . }}
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-db-ros
          image: "{{ .Values.global.initContainers.waitFor.repository }}:{{ .Values.global.initContainers.waitFor.tag }}"
          command: ['bash', '-c']
          args:
            - |
              echo "Waiting for ROS database at {{ include "ros-ocp.fullname" . }}-db-ros:{{ .Values.database.ros.port }}..."
              until timeout 3 bash -c "echo > /dev/tcp/{{ include "ros-ocp.fullname" . }}-db-ros/{{ .Values.database.ros.port }}" 2>/dev/null; do
                echo "Database not ready yet, retrying in 5 seconds..."
                sleep 5
              done
              echo "ROS database is ready"
              echo "ROS database is ready"
        - name: wait-for-kafka
          image: "{{ .Values.global.initContainers.waitFor.repository }}:{{ .Values.global.initContainers.waitFor.tag }}"
          command: ['bash', '-c']
          args:
            - |
              echo "Waiting for Kafka at {{ include "ros-ocp.fullname" . }}-kafka:{{ .Values.kafka.broker.port }}..."
              until timeout 3 bash -c "echo > /dev/tcp/{{ include "ros-ocp.fullname" . }}-kafka/{{ .Values.kafka.broker.port }}" 2>/dev/null; do
                echo "Kafka not ready yet, retrying in 5 seconds..."
                sleep 5
              done
              echo "Kafka is ready"
              echo "Kafka is ready"
      containers:
        {{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }}
        # Envoy sidecar for native JWT authentication
        - name: envoy-proxy
          image: "{{ .Values.jwt_auth.envoy.image.repository }}:{{ .Values.jwt_auth.envoy.image.tag }}"
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          ports:
            - name: http-proxy
              containerPort: {{ .Values.jwt_auth.envoy.port }}
              protocol: TCP
            - name: admin
              containerPort: {{ .Values.jwt_auth.envoy.adminPort }}
              protocol: TCP
          command:
            - /usr/local/bin/envoy
          args:
            - -c
            - /etc/envoy/envoy.yaml
            - --log-level
            - {{ .Values.jwt_auth.envoy.logLevel | default "info" }}
          volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy
              readOnly: true
          livenessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.jwt_auth.envoy.adminPort }}
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.jwt_auth.envoy.adminPort }}
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
        {{- end }}
        - name: rosocp-api
          image: "{{ .Values.rosocp.api.image.repository }}:{{ .Values.rosocp.api.image.tag }}"
          imagePullPolicy: {{ .Values.rosocp.api.image.pullPolicy | default .Values.global.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - |
              ./rosocp db migrate up
              ./rosocp start api
          ports:
            - name: {{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }} http-api {{- else }} http {{- end }}
              containerPort: {{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }} 8081 {{- else }} {{ .Values.rosocp.api.port }} {{- end }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.rosocp.api.metricsPort }}
              protocol: TCP
          env:
            - name: PATH_PREFIX
              value: {{ .Values.rosocp.api.pathPrefix | quote }}
            - name: CLOWDER_ENABLED
              value: "false"
            - name: RBAC_ENABLE
              value: {{ .Values.rosocp.api.rbacEnable | quote }}
            - name: DB_POOL_SIZE
              value: {{ .Values.rosocp.api.dbPoolSize | quote }}
            - name: DB_MAX_OVERFLOW
              value: {{ .Values.rosocp.api.dbMaxOverflow | quote }}
            - name: SERVICE_NAME
              value: {{ .Values.rosocp.api.serviceName | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.rosocp.api.logLevel | quote }}
            - name: DB_HOST
              value: {{ include "ros-ocp.databaseHost" (list . "ros") }}
            - name: DB_PORT
              value: {{ .Values.database.ros.port | quote }}
            - name: DB_NAME
              value: {{ .Values.database.ros.name | quote }}
            - name: DB_USER
              value: {{ .Values.database.ros.user | quote }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ros-ocp.fullname" . }}-db-credentials
                  key: ros-password
            - name: DATABASE_URL
              value: {{ include "ros-ocp.databaseUrl" . }}
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: {{ include "ros-ocp.fullname" . }}-kafka:{{ .Values.kafka.broker.port }}
            - name: ID_PROVIDER
              value: {{ .Values.auth.provider | quote }}
          livenessProbe:
            httpGet:
              path: /status
              port: {{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }} 8081 {{- else }} {{ .Values.rosocp.api.port }} {{- end }}
            initialDelaySeconds: {{ .Values.probes.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /status
              port: {{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }} 8081 {{- else }} {{ .Values.rosocp.api.port }} {{- end }}
            initialDelaySeconds: 15
            periodSeconds: {{ .Values.probes.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.failureThreshold }}
          resources:
            {{- toYaml .Values.resources.application | nindent 12 }}
      volumes:
        {{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }}
        # Envoy configuration volume
        - name: envoy-config
          configMap:
            name: {{ include "ros-ocp.fullname" . }}-envoy-config
            items:
              - key: envoy.yaml
                path: envoy.yaml
        {{- end }}