{{- if eq (include "ros-ocp.jwt.shouldEnable" .) "true" }}
{{- $keycloakUrl := .Values.jwt_auth.keycloak.url | default (include "ros-ocp.keycloak.url" .) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ros-ocp.fullname" . }}-envoy-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ros-ocp.labels" . | nindent 4 }}
data:
  envoy.yaml: |
    # Envoy configuration with Native JWT Authentication
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: {{ .Values.jwt_auth.envoy.port }}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ros_ingress_jwt_http
              codec_type: AUTO
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              route_config:
                name: local_route
                virtual_hosts:
                - name: ros_ingress_backend
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: ros-ingress-backend
              http_filters:
              # Native JWT Authentication filter - validates JWT inline without external service
              - name: envoy.filters.http.jwt_authn
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                  providers:
                    keycloak:
                      issuer: "{{ $keycloakUrl }}/auth/realms/{{ .Values.jwt_auth.keycloak.realm }}"
                      audiences:
                      {{- range .Values.jwt_auth.keycloak.audiences }}
                      - {{ . | quote }}
                      {{- end }}
                      remote_jwks:
                        http_uri:
                          uri: "{{ $keycloakUrl }}/auth/realms/{{ .Values.jwt_auth.keycloak.realm }}/protocol/openid-connect/certs"
                          cluster: keycloak_jwks
                          timeout: 5s
                        cache_duration:
                          seconds: 300
                      # Store JWT payload in metadata for Lua filter to extract
                      payload_in_metadata: "jwt_payload"
                      # Forward Authorization header to backend
                      forward: true
                  rules:
                  # Require JWT for API endpoints
                  - match:
                      prefix: "/api/ingress"
                    requires:
                      provider_name: "keycloak"
                  # Health endpoints don't require authentication
                  - match:
                      prefix: "/health"
                  - match:
                      prefix: "/ready"

              # Lua filter to extract JWT claims and inject X-Rh-Identity header
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    -- Helper function to get claim value with fallbacks
                    local function get_claim(payload, ...)
                      for _, key in ipairs({...}) do
                        if payload[key] ~= nil and payload[key] ~= "" then
                          return tostring(payload[key])
                        end
                      end
                      return ""
                    end

                    -- Helper function to build JSON manually (no json lib in Envoy Lua)
                    local function build_xrhid_json(org_id, account_number, user_type)
                      -- Escape any quotes in values
                      local function escape_json(str)
                        return string.gsub(str, '"', '\\"')
                      end

                      org_id = escape_json(org_id)
                      account_number = escape_json(account_number)
                      user_type = escape_json(user_type)

                      return string.format('{"identity":{"org_id":"%s","account_number":"%s","type":"%s"}}',
                                          org_id, account_number, user_type)
                    end

                    function envoy_on_request(request_handle)
                      -- Get JWT payload from dynamic metadata (set by jwt_authn filter)
                      local metadata = request_handle:streamInfo():dynamicMetadata()
                      local jwt_data = metadata:get("envoy.filters.http.jwt_authn")

                      if jwt_data ~= nil then
                        local payload = jwt_data["jwt_payload"]

                        if payload ~= nil then
                          -- Extract org_id with fallback to alternative claim names
                          local org_id = get_claim(payload, "org_id", "organization_id", "tenant_id")

                          -- Extract account_number with fallback to alternative claim names
                          local account_number = get_claim(payload, "account_number", "account_id", "account")

                          -- Use default values if not present
                          if org_id == "" then
                            org_id = "1"
                            request_handle:logWarn("JWT missing org_id claim, using default: 1")
                          end

                          if account_number == "" then
                            account_number = org_id  -- Default to org_id
                          end

                          -- Build XRHID JSON structure
                          local xrhid_json = build_xrhid_json(org_id, account_number, "User")

                          -- Base64 encode the XRHID JSON
                          local xrhid_base64 = request_handle:base64Escape(xrhid_json)

                          -- Inject X-Rh-Identity header (RHSSO format expected by ros-ocp-backend)
                          request_handle:headers():add("X-Rh-Identity", xrhid_base64)

                          -- Extract user info for logging only
                          local username = get_claim(payload, "preferred_username", "sub")

                          -- Log authentication for debugging
                          request_handle:logInfo(string.format("JWT authenticated: user=%s, org_id=%s, account=%s",
                                                               username, org_id, account_number))
                        end
                      end
                    end

              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      clusters:
      # ROS ingress backend (same pod, different port)
      - name: ros-ingress-backend
        connect_timeout: 5s
        type: STATIC
        load_assignment:
          cluster_name: ros-ingress-backend
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8081

      # Keycloak JWKS endpoint for JWT signature verification
      - name: keycloak_jwks
        connect_timeout: 5s
        type: STRICT_DNS
        load_assignment:
          cluster_name: keycloak_jwks
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ $keycloakUrl | replace "https://" "" | replace "http://" "" }}
                    port_value: 443
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            sni: {{ $keycloakUrl | replace "https://" "" | replace "http://" "" }}

    # Admin interface for monitoring and debugging
    admin:
      address:
        socket_address:
          protocol: TCP
          address: 0.0.0.0
          port_value: {{ .Values.jwt_auth.envoy.adminPort }}
{{- end }}
